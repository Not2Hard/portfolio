{"ast":null,"code":"var _jsxFileName = \"/Users/natalia/Development/portfolio/components/Settings/Settings.js\";\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport Popover from '@material-ui/core/Popover';\nimport IconButton from '@material-ui/core/IconButton';\nimport SettingsIcon from '@material-ui/icons/Settings';\nimport CheckIcon from '@material-ui/icons/Check';\nimport List from '@material-ui/core/List';\nimport ListSubheader from '@material-ui/core/ListSubheader';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Switch from '@material-ui/core/Switch';\nimport Divider from '@material-ui/core/Divider';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport { i18n, withTranslation } from \"../../i18n\";\nimport useStyles from './settings-style';\nlet themeType = 'light';\n\nif (typeof Storage !== 'undefined') {\n  themeType = localStorage.getItem('luxiTheme') || 'light';\n}\n\nfunction Settings(props) {\n  const {\n    0: ctn,\n    1: setCtn\n  } = useState(null);\n  const classes = useStyles();\n  const {\n    0: anchorEl,\n    1: setAnchorEl\n  } = useState(null);\n  const {\n    0: isDark,\n    1: setDark\n  } = useState(themeType === 'dark');\n\n  function handleClick(event) {\n    setAnchorEl(event.currentTarget);\n  }\n\n  function handleClose() {\n    setAnchorEl(null);\n  }\n\n  const handleChangeMode = () => {\n    setDark(!isDark);\n    props.toggleDark();\n  };\n\n  function handleChangeLang(lang) {\n    if (lang === 'ar') {\n      i18n.changeLanguage('ar');\n      props.toggleDir('rtl');\n    } else {\n      i18n.changeLanguage(lang);\n      props.toggleDir('ltr');\n    }\n\n    setAnchorEl(null);\n  }\n\n  useEffect(() => {\n    setCtn(document.getElementById('main-wrap'));\n  });\n  const open = Boolean(anchorEl);\n  const id = open ? 'simple-popover' : undefined;\n  const {\n    invert,\n    t\n  } = props;\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.setting,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Popover, {\n    id: id,\n    open: open,\n    anchorEl: anchorEl,\n    onClose: handleClose,\n    container: ctn,\n    anchorOrigin: {\n      vertical: 'bottom',\n      horizontal: 'center'\n    },\n    transformOrigin: {\n      vertical: 'top',\n      horizontal: 'center'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(List, {\n    component: \"nav\",\n    className: classes.modeMenu,\n    \"aria-label\": \"Mode-menu\",\n    subheader: /*#__PURE__*/React.createElement(ListSubheader, {\n      component: \"div\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 13\n      }\n    }, t('common:profile-landing.header_theme')),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(ListItem, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    component: \"div\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    alignItems: \"center\",\n    spacing: 1,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 17\n    }\n  }, t('common:profile-landing.header_light')), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Switch, {\n    checked: isDark,\n    onChange: handleChangeMode,\n    value: isDark,\n    inputProps: {\n      'aria-label': 'checkbox'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 19\n    }\n  })), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 17\n    }\n  }, t('common:profile-landing.header_dark')))))), /*#__PURE__*/React.createElement(Divider, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(List, {\n    component: \"nav\",\n    className: classes.langMenu,\n    \"aria-label\": \"Language-menu\",\n    subheader: /*#__PURE__*/React.createElement(ListSubheader, {\n      component: \"div\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 13\n      }\n    }, t('common:profile-landing.header_language')),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 9\n    }\n  }, i18n.options.allLanguages && i18n.options.allLanguages.map(val => /*#__PURE__*/React.createElement(ListItem, {\n    key: val,\n    role: undefined,\n    dense: true,\n    button: true,\n    onClick: () => handleChangeLang(val),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(ListItemIcon, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"i\", {\n    className: val,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 17\n    }\n  })), /*#__PURE__*/React.createElement(ListItemText, {\n    primary: t('common:' + val),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 15\n    }\n  }), i18n.language === val && /*#__PURE__*/React.createElement(ListItemSecondaryAction, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(CheckIcon, {\n    color: \"primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 19\n    }\n  })))))));\n}\n\nSettings.propTypes = {\n  toggleDark: PropTypes.func.isRequired,\n  toggleDir: PropTypes.func.isRequired,\n  t: PropTypes.func.isRequired,\n  invert: PropTypes.bool\n};\nSettings.defaultProps = {\n  invert: false\n};\nexport default withTranslation(['common', 'profile-landing'])(Settings);","map":{"version":3,"sources":["/Users/natalia/Development/portfolio/components/Settings/Settings.js"],"names":["React","useState","useEffect","PropTypes","clsx","Popover","IconButton","SettingsIcon","CheckIcon","List","ListSubheader","ListItem","ListItemIcon","ListItemSecondaryAction","ListItemText","Switch","Divider","Grid","Typography","i18n","withTranslation","useStyles","themeType","Storage","localStorage","getItem","Settings","props","ctn","setCtn","classes","anchorEl","setAnchorEl","isDark","setDark","handleClick","event","currentTarget","handleClose","handleChangeMode","toggleDark","handleChangeLang","lang","changeLanguage","toggleDir","document","getElementById","open","Boolean","id","undefined","invert","t","setting","vertical","horizontal","modeMenu","langMenu","options","allLanguages","map","val","language","propTypes","func","isRequired","bool","defaultProps"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,OAAP,MAAoB,2BAApB;AACA,OAAOC,UAAP,MAAuB,8BAAvB;AACA,OAAOC,YAAP,MAAyB,6BAAzB;AACA,OAAOC,SAAP,MAAsB,0BAAtB;AACA,OAAOC,IAAP,MAAiB,wBAAjB;AACA,OAAOC,aAAP,MAA0B,iCAA1B;AACA,OAAOC,QAAP,MAAqB,4BAArB;AACA,OAAOC,YAAP,MAAyB,gCAAzB;AACA,OAAOC,uBAAP,MAAoC,2CAApC;AACA,OAAOC,YAAP,MAAyB,gCAAzB;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,OAAOC,OAAP,MAAoB,2BAApB;AACA,OAAOC,IAAP,MAAiB,wBAAjB;AACA,OAAOC,UAAP,MAAuB,8BAAvB;AACA,SAASC,IAAT,EAAeC,eAAf,QAAsC,YAAtC;AACA,OAAOC,SAAP,MAAsB,kBAAtB;AAEA,IAAIC,SAAS,GAAG,OAAhB;;AACA,IAAI,OAAOC,OAAP,KAAmB,WAAvB,EAAoC;AAClCD,EAAAA,SAAS,GAAGE,YAAY,CAACC,OAAb,CAAqB,WAArB,KAAqC,OAAjD;AACD;;AAED,SAASC,QAAT,CAAkBC,KAAlB,EAAyB;AACvB,QAAM;AAAA,OAACC,GAAD;AAAA,OAAMC;AAAN,MAAgB5B,QAAQ,CAAC,IAAD,CAA9B;AACA,QAAM6B,OAAO,GAAGT,SAAS,EAAzB;AACA,QAAM;AAAA,OAACU,QAAD;AAAA,OAAWC;AAAX,MAA0B/B,QAAQ,CAAC,IAAD,CAAxC;AACA,QAAM;AAAA,OAACgC,MAAD;AAAA,OAASC;AAAT,MAAoBjC,QAAQ,CAACqB,SAAS,KAAK,MAAf,CAAlC;;AAEA,WAASa,WAAT,CAAqBC,KAArB,EAA4B;AAC1BJ,IAAAA,WAAW,CAACI,KAAK,CAACC,aAAP,CAAX;AACD;;AAED,WAASC,WAAT,GAAuB;AACrBN,IAAAA,WAAW,CAAC,IAAD,CAAX;AACD;;AAED,QAAMO,gBAAgB,GAAG,MAAM;AAC7BL,IAAAA,OAAO,CAAC,CAACD,MAAF,CAAP;AACAN,IAAAA,KAAK,CAACa,UAAN;AACD,GAHD;;AAKA,WAASC,gBAAT,CAA0BC,IAA1B,EAAgC;AAC9B,QAAIA,IAAI,KAAK,IAAb,EAAmB;AACjBvB,MAAAA,IAAI,CAACwB,cAAL,CAAoB,IAApB;AACAhB,MAAAA,KAAK,CAACiB,SAAN,CAAgB,KAAhB;AACD,KAHD,MAGO;AACLzB,MAAAA,IAAI,CAACwB,cAAL,CAAoBD,IAApB;AACAf,MAAAA,KAAK,CAACiB,SAAN,CAAgB,KAAhB;AACD;;AACDZ,IAAAA,WAAW,CAAC,IAAD,CAAX;AACD;;AAED9B,EAAAA,SAAS,CAAC,MAAM;AACd2B,IAAAA,MAAM,CAACgB,QAAQ,CAACC,cAAT,CAAwB,WAAxB,CAAD,CAAN;AACD,GAFQ,CAAT;AAIA,QAAMC,IAAI,GAAGC,OAAO,CAACjB,QAAD,CAApB;AACA,QAAMkB,EAAE,GAAGF,IAAI,GAAG,gBAAH,GAAsBG,SAArC;AACA,QAAM;AAAEC,IAAAA,MAAF;AAAUC,IAAAA;AAAV,MAAgBzB,KAAtB;AACA,sBACE;AAAK,IAAA,SAAS,EAAEG,OAAO,CAACuB,OAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAeE,oBAAC,OAAD;AACE,IAAA,EAAE,EAAEJ,EADN;AAEE,IAAA,IAAI,EAAEF,IAFR;AAGE,IAAA,QAAQ,EAAEhB,QAHZ;AAIE,IAAA,OAAO,EAAEO,WAJX;AAKE,IAAA,SAAS,EAAEV,GALb;AAME,IAAA,YAAY,EAAE;AACZ0B,MAAAA,QAAQ,EAAE,QADE;AAEZC,MAAAA,UAAU,EAAE;AAFA,KANhB;AAUE,IAAA,eAAe,EAAE;AACfD,MAAAA,QAAQ,EAAE,KADK;AAEfC,MAAAA,UAAU,EAAE;AAFG,KAVnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAeE,oBAAC,IAAD;AACE,IAAA,SAAS,EAAC,KADZ;AAEE,IAAA,SAAS,EAAEzB,OAAO,CAAC0B,QAFrB;AAGE,kBAAW,WAHb;AAIE,IAAA,SAAS,eACP,oBAAC,aAAD;AAAe,MAAA,SAAS,EAAC,KAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGJ,CAAC,CAAC,qCAAD,CADJ,CALJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAUE,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,UAAD;AAAY,IAAA,SAAS,EAAC,KAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,IAAD;AAAM,IAAA,SAAS,MAAf;AAAgB,IAAA,UAAU,EAAC,QAA3B;AAAoC,IAAA,OAAO,EAAE,CAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,IAAD;AAAM,IAAA,IAAI,MAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGA,CAAC,CAAC,qCAAD,CADJ,CADF,eAIE,oBAAC,IAAD;AAAM,IAAA,IAAI,MAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,MAAD;AACE,IAAA,OAAO,EAAEnB,MADX;AAEE,IAAA,QAAQ,EAAEM,gBAFZ;AAGE,IAAA,KAAK,EAAEN,MAHT;AAIE,IAAA,UAAU,EAAE;AAAE,oBAAc;AAAhB,KAJd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CAJF,eAYE,oBAAC,IAAD;AAAM,IAAA,IAAI,MAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGmB,CAAC,CAAC,oCAAD,CADJ,CAZF,CADF,CADF,CAVF,CAfF,eA8CE,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IA9CF,eA+CE,oBAAC,IAAD;AACE,IAAA,SAAS,EAAC,KADZ;AAEE,IAAA,SAAS,EAAEtB,OAAO,CAAC2B,QAFrB;AAGE,kBAAW,eAHb;AAIE,IAAA,SAAS,eACP,oBAAC,aAAD;AAAe,MAAA,SAAS,EAAC,KAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGL,CAAC,CAAC,wCAAD,CADJ,CALJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAUGjC,IAAI,CAACuC,OAAL,CAAaC,YAAb,IAA6BxC,IAAI,CAACuC,OAAL,CAAaC,YAAb,CAA0BC,GAA1B,CAA8BC,GAAG,iBAC7D,oBAAC,QAAD;AACE,IAAA,GAAG,EAAEA,GADP;AAEE,IAAA,IAAI,EAAEX,SAFR;AAGE,IAAA,KAAK,MAHP;AAIE,IAAA,MAAM,MAJR;AAKE,IAAA,OAAO,EAAE,MAAMT,gBAAgB,CAACoB,GAAD,CALjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAOE,oBAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAG,IAAA,SAAS,EAAEA,GAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CAPF,eAUE,oBAAC,YAAD;AAAc,IAAA,OAAO,EAAET,CAAC,CAAC,YAAYS,GAAb,CAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAVF,EAWG1C,IAAI,CAAC2C,QAAL,KAAkBD,GAAlB,iBACC,oBAAC,uBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,SAAD;AAAW,IAAA,KAAK,EAAC,SAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CAZJ,CAD4B,CAVhC,CA/CF,CAfF,CADF;AAgGD;;AAEDnC,QAAQ,CAACqC,SAAT,GAAqB;AACnBvB,EAAAA,UAAU,EAAErC,SAAS,CAAC6D,IAAV,CAAeC,UADR;AAEnBrB,EAAAA,SAAS,EAAEzC,SAAS,CAAC6D,IAAV,CAAeC,UAFP;AAGnBb,EAAAA,CAAC,EAAEjD,SAAS,CAAC6D,IAAV,CAAeC,UAHC;AAInBd,EAAAA,MAAM,EAAEhD,SAAS,CAAC+D;AAJC,CAArB;AAOAxC,QAAQ,CAACyC,YAAT,GAAwB;AACtBhB,EAAAA,MAAM,EAAE;AADc,CAAxB;AAIA,eAAe/B,eAAe,CAAC,CAAC,QAAD,EAAW,iBAAX,CAAD,CAAf,CAA+CM,QAA/C,CAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport Popover from '@material-ui/core/Popover';\nimport IconButton from '@material-ui/core/IconButton';\nimport SettingsIcon from '@material-ui/icons/Settings';\nimport CheckIcon from '@material-ui/icons/Check';\nimport List from '@material-ui/core/List';\nimport ListSubheader from '@material-ui/core/ListSubheader';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Switch from '@material-ui/core/Switch';\nimport Divider from '@material-ui/core/Divider';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport { i18n, withTranslation } from '~/i18n';\nimport useStyles from './settings-style';\n\nlet themeType = 'light';\nif (typeof Storage !== 'undefined') {\n  themeType = localStorage.getItem('luxiTheme') || 'light';\n}\n\nfunction Settings(props) {\n  const [ctn, setCtn] = useState(null);\n  const classes = useStyles();\n  const [anchorEl, setAnchorEl] = useState(null);\n  const [isDark, setDark] = useState(themeType === 'dark');\n\n  function handleClick(event) {\n    setAnchorEl(event.currentTarget);\n  }\n\n  function handleClose() {\n    setAnchorEl(null);\n  }\n\n  const handleChangeMode = () => {\n    setDark(!isDark);\n    props.toggleDark();\n  };\n\n  function handleChangeLang(lang) {\n    if (lang === 'ar') {\n      i18n.changeLanguage('ar');\n      props.toggleDir('rtl');\n    } else {\n      i18n.changeLanguage(lang);\n      props.toggleDir('ltr');\n    }\n    setAnchorEl(null);\n  }\n\n  useEffect(() => {\n    setCtn(document.getElementById('main-wrap'));\n  });\n\n  const open = Boolean(anchorEl);\n  const id = open ? 'simple-popover' : undefined;\n  const { invert, t } = props;\n  return (\n    <div className={classes.setting}>\n      {/* <IconButton\n        aria-describedby={id}\n        aria-label=\"Settings\"\n        onClick={handleClick}\n        className={\n          clsx(\n            classes.icon,\n            open && classes.active,\n            invert && classes.invert\n          )\n        }\n      >\n        <SettingsIcon fontSize=\"inherit\" />\n      </IconButton> */}\n      <Popover\n        id={id}\n        open={open}\n        anchorEl={anchorEl}\n        onClose={handleClose}\n        container={ctn}\n        anchorOrigin={{\n          vertical: 'bottom',\n          horizontal: 'center',\n        }}\n        transformOrigin={{\n          vertical: 'top',\n          horizontal: 'center',\n        }}\n      >\n        <List\n          component=\"nav\"\n          className={classes.modeMenu}\n          aria-label=\"Mode-menu\"\n          subheader={(\n            <ListSubheader component=\"div\">\n              {t('common:profile-landing.header_theme')}\n            </ListSubheader>\n          )}\n        >\n          <ListItem>\n            <Typography component=\"div\">\n              <Grid container alignItems=\"center\" spacing={1}>\n                <Grid item>\n                  {t('common:profile-landing.header_light')}\n                </Grid>\n                <Grid item>\n                  <Switch\n                    checked={isDark}\n                    onChange={handleChangeMode}\n                    value={isDark}\n                    inputProps={{ 'aria-label': 'checkbox' }}\n                  />\n                </Grid>\n                <Grid item>\n                  {t('common:profile-landing.header_dark')}\n                </Grid>\n              </Grid>\n            </Typography>\n          </ListItem>\n        </List>\n        <Divider />\n        <List\n          component=\"nav\"\n          className={classes.langMenu}\n          aria-label=\"Language-menu\"\n          subheader={(\n            <ListSubheader component=\"div\">\n              {t('common:profile-landing.header_language')}\n            </ListSubheader>\n          )}\n        >\n          {i18n.options.allLanguages && i18n.options.allLanguages.map(val => (\n            <ListItem\n              key={val}\n              role={undefined}\n              dense\n              button\n              onClick={() => handleChangeLang(val)}\n            >\n              <ListItemIcon>\n                <i className={val} />\n              </ListItemIcon>\n              <ListItemText primary={t('common:' + val)} />\n              {i18n.language === val && (\n                <ListItemSecondaryAction>\n                  <CheckIcon color=\"primary\" />\n                </ListItemSecondaryAction>\n              )}\n            </ListItem>\n          ))}\n        </List>\n      </Popover>\n    </div>\n  );\n}\n\nSettings.propTypes = {\n  toggleDark: PropTypes.func.isRequired,\n  toggleDir: PropTypes.func.isRequired,\n  t: PropTypes.func.isRequired,\n  invert: PropTypes.bool,\n};\n\nSettings.defaultProps = {\n  invert: false\n};\n\nexport default withTranslation(['common', 'profile-landing'])(Settings);\n"]},"metadata":{},"sourceType":"module"}