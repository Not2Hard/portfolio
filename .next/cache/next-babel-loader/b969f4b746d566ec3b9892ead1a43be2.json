{"ast":null,"code":"var _jsxFileName = \"/Users/natalia/Development/portfolio/components/DaoQuotes/Divination.js\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n// import './divination.scss';\nimport zen from './images/again.gif';\nimport React from 'react'; // import { tao, taoChn } from './dao'\n\nconst initialState = {\n  askAquestion: true,\n  chapterNum: -1,\n  poem: null,\n  showEntirePoem: false\n};\nexport default class Divination extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", initialState);\n\n    _defineProperty(this, \"handleClick\", event => {\n      event.preventDefault();\n      this.setState({\n        askAquestion: false\n      }); // is it english or chinese\n      // const source = this.props.isEnglish\n      //     ? tao\n      //     : taoChn\n\n      const source = this.props.dataSource; //choose a chapter\n\n      const index = Math.random() * source.length;\n      const rounded = Math.floor(index);\n      const passage = source[rounded];\n      const {\n        chapterNum,\n        poem\n      } = passage.passage; //choose a quote\n\n      const chozenPoem = poem.split('</br>');\n      const indexQuote = Math.random() * (chozenPoem.length - 1);\n      const roundedQuote = Math.floor(indexQuote);\n      const poemIndexes = [roundedQuote // roundedQuote + 1,\n      ];\n      this.setState({\n        chapterNum,\n        poem: poem.split('</br>'),\n        poemIndexes\n      });\n    });\n\n    _defineProperty(this, \"handleShowPoem\", () => {\n      this.setState({\n        showEntirePoem: true\n      });\n      this.setState({\n        askAquestion: false\n      });\n    });\n\n    _defineProperty(this, \"resetAll\", () => {\n      this.setState(_objectSpread({}, initialState));\n    });\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.isEnglish !== this.props.isEnglish) {\n      this.setState(_objectSpread({}, initialState));\n    }\n  }\n\n  render() {\n    const {\n      askAquestion,\n      poem,\n      poemIndexes,\n      showEntirePoem\n    } = this.state;\n    const shouldShowButton = poem && !showEntirePoem;\n    const questMessage = this.props.isEnglish ? 'Make a question out of your doubts' : '问一个问题';\n    const revealBtnMessage = this.props.isEnglish ? 'Reveal a quote...' : '显示报价...';\n    const contextBtnMessage = this.props.isEnglish ? 'This quote in chapter' : '本章引用';\n    const againBtnMessage = this.props.isEnglish ? 'Start again' : '重新开始';\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"divination\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 13\n      }\n    }, askAquestion && /*#__PURE__*/React.createElement(\"div\", {\n      className: \"question\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 29\n      }\n    }, \" \", questMessage), /*#__PURE__*/React.createElement(\"a\", {\n      href: \"#\",\n      onClick: this.handleClick,\n      className: \"reveal_btn\",\n      alt: \"click         to see Dao quote\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 29\n      }\n    }, revealBtnMessage)), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"quoteContainer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"quoteBlock\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 21\n      }\n    }, poem && poem.map((line, index) => {\n      const isCurrentLineSelected = poemIndexes.includes(index);\n      const shouldShowLine = isCurrentLineSelected || showEntirePoem;\n      let className = shouldShowLine ? \"poem-line show\" : \"poem-line\";\n\n      if (showEntirePoem && isCurrentLineSelected) {\n        className = className + \" highlight\";\n      }\n\n      return /*#__PURE__*/React.createElement(\"div\", {\n        key: index,\n        className: className,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 40\n        }\n      }, line);\n    })), shouldShowButton && /*#__PURE__*/React.createElement(\"div\", {\n      className: \"details\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"a\", {\n      className: \"reveal_btn\",\n      onClick: this.handleShowPoem,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 5\n      }\n    }, contextBtnMessage)), !askAquestion && /*#__PURE__*/React.createElement(\"div\", {\n      className: \"again_btn\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"a\", {\n      href: \"#\",\n      onClick: this.resetAll,\n      className: \"zen_btn\",\n      alt: \"new quote from Dao\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      className: \"try_again\",\n      src: zen,\n      alt: \"try again\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 33\n      }\n    }), \" \", againBtnMessage))));\n  }\n\n}","map":{"version":3,"sources":["/Users/natalia/Development/portfolio/components/DaoQuotes/Divination.js"],"names":["zen","React","initialState","askAquestion","chapterNum","poem","showEntirePoem","Divination","Component","event","preventDefault","setState","source","props","dataSource","index","Math","random","length","rounded","floor","passage","chozenPoem","split","indexQuote","roundedQuote","poemIndexes","componentDidUpdate","prevProps","isEnglish","render","state","shouldShowButton","questMessage","revealBtnMessage","contextBtnMessage","againBtnMessage","handleClick","map","line","isCurrentLineSelected","includes","shouldShowLine","className","handleShowPoem","resetAll"],"mappings":"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","sourcesContent":["// import './divination.scss';\nimport zen from './images/again.gif';\n\nimport React from 'react';\n\n// import { tao, taoChn } from './dao'\n\nconst initialState = {\n    askAquestion: true,\n    chapterNum: -1,\n    poem: null,\n    showEntirePoem: false,\n}\n\nexport default class Divination extends React.Component {\n    state = initialState\n\n    componentDidUpdate(prevProps) {\n        if (prevProps.isEnglish !== this.props.isEnglish) {\n            this.setState({ ...initialState })\n        }\n    }\n\n    handleClick = (event) =>  { \n        event.preventDefault()\n        this.setState({ askAquestion: false })\n// is it english or chinese\n        // const source = this.props.isEnglish\n        //     ? tao\n        //     : taoChn\n\n        const source = this.props.dataSource\n\n//choose a chapter\n        const index   = Math.random() * (source.length)\n        const rounded = Math.floor(index)\n \n\n        const passage = source[rounded]\n        \n        const { chapterNum, poem } = passage.passage\n\n  \n        //choose a quote\n            const chozenPoem   = poem.split('</br>')\n            const indexQuote   = Math.random() * (chozenPoem.length - 1)\n            const roundedQuote = Math.floor(indexQuote)\n\n            const poemIndexes = [\n                roundedQuote,\n                // roundedQuote + 1,\n            ]\n                        \n            this.setState({\n                chapterNum,\n                poem: poem.split('</br>'),\n                poemIndexes,\n            })            \n    }\n\n  \n\n    handleShowPoem = () => {\n        this.setState({ showEntirePoem: true })\n        this.setState({ askAquestion: false })\n    }\n\n    resetAll = () => {\n        this.setState({ ...initialState })\n        \n    }\n\n    render() {\n        const { askAquestion, poem, poemIndexes, showEntirePoem } = this.state\n\n        const shouldShowButton = poem && !showEntirePoem\n\n        const questMessage = this.props.isEnglish ? 'Make a question out of your doubts' : '问一个问题'\n\n        const revealBtnMessage = this.props.isEnglish ? 'Reveal a quote...' : '显示报价...'\n\n        const contextBtnMessage = this.props.isEnglish ? 'This quote in chapter' : '本章引用'\n\n        const againBtnMessage = this.props.isEnglish ? 'Start again' : '重新开始'\n\n\n        return (\n            <div className=\"divination\">\n                {\n                    askAquestion && (\n                        <div className=\"question\">\n                            <h3> { questMessage }</h3>\n                            <a href=\"#\" onClick={this.handleClick} className=\"reveal_btn\" alt=\"click         to see Dao quote\">{ revealBtnMessage }</a> \n                        </div>\n                    )\n                }\n\n                <div className=\"quoteContainer\">\n                    <div className=\"quoteBlock\">\n                        {\n                            poem && poem.map((line, index) => {\n                                const isCurrentLineSelected = poemIndexes.includes(index)\n\n                                const shouldShowLine = isCurrentLineSelected || showEntirePoem\n\n                                let className = shouldShowLine ? \"poem-line show\" : \"poem-line\"\n\n                                if (showEntirePoem && isCurrentLineSelected) {\n                                    className = className + \" highlight\"             \n                                }\n\n                                return <div key={index} className={className}>{ line }</div>\n                            })\n                        }\n                       \n                    </div>\n\n                    {\n                        \n                        shouldShowButton && (\n                            <div className=\"details\">\n    <a className=\"reveal_btn\" onClick={this.handleShowPoem}>{contextBtnMessage}</a>\n                            </div>\n                        )\n                    }\n                     {\n                            !askAquestion && (\n                            <div className=\"again_btn\">\n                            <a href=\"#\" onClick={this.resetAll} className=\"zen_btn\" alt=\"new quote from Dao\">\n                                <img className=\"try_again\" src={zen} alt=\"try again\"></img> {againBtnMessage}\n                            </a>\n                            </div>)\n                        }\n                </div>\n            </div>\n\n        )\n    }\n}"]},"metadata":{},"sourceType":"module"}