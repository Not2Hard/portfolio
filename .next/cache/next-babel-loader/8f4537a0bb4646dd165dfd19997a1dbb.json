{"ast":null,"code":"var _jsxFileName = \"/Users/natalia/Development/portfolio/components/Projectsux/AwsOverview.js\";\nvar __jsx = React.createElement;\nimport React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport Container from '@material-ui/core/Container';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\nimport { useTheme } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport Divider from '@material-ui/core/Divider';\nimport { withTranslation } from \"../../i18n\";\nimport logo from '../../public/images/profile-logo.svg';\nimport brand from \"../../public/text/brand\";\nimport { useText } from \"../../theme/common\";\nimport useStyles from './ux-style';\nimport ContactForm from '../Contact/Form';\nimport awsmap from '../../public/images/profile/map.jpg';\nimport tf2 from '../../public/images/profile/tf-images/tafs2.jpg';\nimport users from '../../public/images/profile/tf-images/users.jpg';\nimport tfmock from '../../public/images/profile/tf-images/tapandfork.jpg';\n\nconst AwsOverview = () => {\n  const {\n    0: pageNumber,\n    1: setPageNumber\n  } = useState(1);\n  const classes = useStyles();\n  const text = useText();\n  const theme = useTheme();\n  const isMobile = useMediaQuery(theme.breakpoints.down('sm'));\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.root,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Container, {\n    maxWidth: \"md\",\n    component: \"footer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    variant: \"h6\",\n    align: \"left\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 11\n    }\n  }, \"Project Description:\"), /*#__PURE__*/React.createElement(Typography, {\n    className: text.paragraph,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 11\n    }\n  }, \"When using amazon web services developers  initiate instances of services in different regions. It is hard to see what is still running and what has stopped. Some of those services could be pricey and they can be on and off by a condition that is hard to keep in track. One can get unexpectedly high bill if forget that something in different region is still running.\", /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 378\n    }\n  }), \"A simple web application was created to see all accounts in all the regions.\"), /*#__PURE__*/React.createElement(\"img\", {\n    src: awsmap,\n    align: \"center\",\n    width: \"90%\",\n    alt: \"AWS accounts map\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(Typography, {\n    className: text.paragraph,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"b\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }\n  }, \"My role in this project\"), \" - UX and Graphic design of the application\"), /*#__PURE__*/React.createElement(Typography, {\n    variant: \"h6\",\n    align: \"left\",\n    color: \"primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 11\n    }\n  }, \"User research:\"), /*#__PURE__*/React.createElement(Typography, {\n    className: text.paragraph,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 11\n    }\n  }, \"This application is for aws developers. I didn't have to create personas for this project. My personal contacts are mostly developers :)\", /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 147\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 152\n    }\n  }), \"It seemed logical to use a spreadsheet data presentation. Many developers I know don't like spreadsheets, though.\", /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 124\n    }\n  }), \"Bubble chart is much more fun and helps to prioretise your actions. I desided to combine buble chart idea with cards. \", /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 131\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 136\n    }\n  }), \"Every servise in every reagion will be shown in a seporate card. On the front will be information at glance. On click the card is turning and shows detailes.\", /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 170\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 175\n    }\n  }), \"The size of the card show how many items are running title shows what servis is it. From a quick glance a user can see where the biggest buill will come from.\", /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 171\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 176\n    }\n  }))));\n};\n\nAwsOverview.propTypes = {\n  t: PropTypes.func.isRequired\n};\nexport default withTranslation(['profile-landing'])(AwsOverview);","map":{"version":3,"sources":["/Users/natalia/Development/portfolio/components/Projectsux/AwsOverview.js"],"names":["React","useState","PropTypes","Container","useMediaQuery","useTheme","Grid","Typography","Divider","withTranslation","logo","brand","useText","useStyles","ContactForm","awsmap","tf2","users","tfmock","AwsOverview","pageNumber","setPageNumber","classes","text","theme","isMobile","breakpoints","down","root","paragraph","propTypes","t","func","isRequired"],"mappings":"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","sourcesContent":["\n\nimport React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport Container from '@material-ui/core/Container';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\nimport { useTheme } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport Divider from '@material-ui/core/Divider';\nimport { withTranslation } from '~/i18n';\nimport logo from '../../public/images/profile-logo.svg';\nimport brand from '~/public/text/brand';\nimport { useText } from '~/theme/common';\nimport useStyles from './ux-style';\nimport ContactForm from '../Contact/Form';\nimport awsmap from '../../public/images/profile/map.jpg';\nimport tf2 from '../../public/images/profile/tf-images/tafs2.jpg';\nimport users from '../../public/images/profile/tf-images/users.jpg';\nimport tfmock from '../../public/images/profile/tf-images/tapandfork.jpg';\n\nconst AwsOverview = () => {\n  const [pageNumber, setPageNumber] = useState(1);\n  const classes = useStyles();\n  const text = useText();\n  const theme = useTheme();\n  const isMobile = useMediaQuery(theme.breakpoints.down('sm'));\n\n\n    return (\n      <div className={classes.root}>\n        <Container maxWidth=\"md\" component=\"footer\">\n          \n          <Typography variant=\"h6\" align=\"left\" >\n            Project Description:\n          </Typography>\n        \n          <Typography className={text.paragraph}>\n          When using amazon web services developers  initiate instances of services in different regions. It is hard to see what is still running and what has stopped. Some of those services could be pricey and they can be on and off by a condition that is hard to keep in track. One can get unexpectedly high bill if forget that something in different region is still running.<br/>\n          A simple web application was created to see all accounts in all the regions.\n          </Typography>\n          \n          <img src={awsmap} align=\"center\" width=\"90%\" alt=\"AWS accounts map\" />\n          <Typography className={text.paragraph}>\n            <b>My role in this project</b> - UX and Graphic design of the application\n          </Typography>\n          <Typography variant=\"h6\" align=\"left\" color=\"primary\">\n          User research:\n          </Typography>\n          <Typography className={text.paragraph}>\n          This application is for aws developers. I didn't have to create personas for this project. My personal contacts are mostly developers :)<br/><br/>\n            \n          It seemed logical to use a spreadsheet data presentation. Many developers I know don't like spreadsheets, though.<br/>\n            Bubble chart is much more fun and helps to prioretise your actions. I desided to combine buble chart idea with cards. <br/><br/>\n\n            Every servise in every reagion will be shown in a seporate card. On the front will be information at glance. On click the card is turning and shows detailes.<br/><br/>\n            \n            The size of the card show how many items are running title shows what servis is it. From a quick glance a user can see where the biggest buill will come from.<br/><br/>\n          </Typography>\n          \n        </Container>      \n    </div>\n    );\n  }\n\n  AwsOverview.propTypes = {\n    t: PropTypes.func.isRequired\n  };\n  \n  export default withTranslation(['profile-landing'])(AwsOverview);"]},"metadata":{},"sourceType":"module"}