{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/natalia/Development/portfolio/components/DaoQuotes/Divination.js\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\n// import './divination.scss';\nimport zen from './images/again.gif';\nimport React from 'react'; // import { tao, taoChn } from './dao'\n\nvar initialState = {\n  askAquestion: true,\n  chapterNum: -1,\n  poem: null,\n  showEntirePoem: false\n};\n\nvar Divination = /*#__PURE__*/function (_React$Component) {\n  _inherits(Divination, _React$Component);\n\n  var _super = _createSuper(Divination);\n\n  function Divination() {\n    var _this;\n\n    _classCallCheck(this, Divination);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", initialState);\n\n    _defineProperty(_assertThisInitialized(_this), \"handleClick\", function (event) {\n      event.preventDefault();\n\n      _this.setState({\n        askAquestion: false\n      }); // is it english or chinese\n      // const source = this.props.isEnglish\n      //     ? tao\n      //     : taoChn\n\n\n      var source = _this.props.dataSource; //choose a chapter\n\n      var index = Math.random() * source.length;\n      var rounded = Math.floor(index);\n      var passage = source[rounded];\n      var _passage$passage = passage.passage,\n          chapterNum = _passage$passage.chapterNum,\n          poem = _passage$passage.poem; //choose a quote\n\n      var chozenPoem = poem.split('</br>');\n      var indexQuote = Math.random() * (chozenPoem.length - 1);\n      var roundedQuote = Math.floor(indexQuote);\n      var poemIndexes = [roundedQuote // roundedQuote + 1,\n      ];\n\n      _this.setState({\n        chapterNum: chapterNum,\n        poem: poem.split('</br>'),\n        poemIndexes: poemIndexes\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleShowPoem\", function () {\n      _this.setState({\n        showEntirePoem: true\n      });\n\n      _this.setState({\n        askAquestion: false\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"resetAll\", function () {\n      _this.setState(_objectSpread({}, initialState));\n    });\n\n    return _this;\n  }\n\n  _createClass(Divination, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      if (prevProps.isEnglish !== this.props.isEnglish) {\n        this.setState(_objectSpread({}, initialState));\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$state = this.state,\n          askAquestion = _this$state.askAquestion,\n          poem = _this$state.poem,\n          poemIndexes = _this$state.poemIndexes,\n          showEntirePoem = _this$state.showEntirePoem;\n      var shouldShowButton = poem && !showEntirePoem;\n      var questMessage = this.props.isEnglish ? 'Make a question out of your doubts' : '问一个问题';\n      var revealBtnMessage = this.props.isEnglish ? 'Reveal a quote...' : '显示报价...';\n      var contextBtnMessage = this.props.isEnglish ? 'This quote in chapter' : '本章引用';\n      var againBtnMessage = this.props.isEnglish ? 'Start again' : '重新开始';\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"divination\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 13\n        }\n      }, askAquestion && /*#__PURE__*/React.createElement(\"div\", {\n        className: \"question\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(\"h3\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 29\n        }\n      }, \" \", questMessage), /*#__PURE__*/React.createElement(\"a\", {\n        href: \"#\",\n        onClick: this.handleClick,\n        className: \"reveal_btn\",\n        alt: \"click         to see Dao quote\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 29\n        }\n      }, revealBtnMessage)), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"quoteContainer\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"quoteBlock\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 21\n        }\n      }, poem && poem.map(function (line, index) {\n        var isCurrentLineSelected = poemIndexes.includes(index);\n        var shouldShowLine = isCurrentLineSelected || showEntirePoem;\n        var className = shouldShowLine ? \"poem-line show\" : \"poem-line\";\n\n        if (showEntirePoem && isCurrentLineSelected) {\n          className = className + \" highlight\";\n        }\n\n        return /*#__PURE__*/React.createElement(\"div\", {\n          key: index,\n          className: className,\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 40\n          }\n        }, line);\n      })), shouldShowButton && /*#__PURE__*/React.createElement(\"div\", {\n        className: \"details\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(\"a\", {\n        className: \"reveal_btn\",\n        onClick: this.handleShowPoem,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 5\n        }\n      }, contextBtnMessage)), !askAquestion && /*#__PURE__*/React.createElement(\"div\", {\n        className: \"again_btn\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(\"a\", {\n        href: \"#\",\n        onClick: this.resetAll,\n        className: \"zen_btn\",\n        alt: \"new quote from Dao\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(\"img\", {\n        className: \"try_again\",\n        src: zen,\n        alt: \"try again\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 33\n        }\n      }), \" \", againBtnMessage))));\n    }\n  }]);\n\n  return Divination;\n}(React.Component);\n\nexport { Divination as default };","map":{"version":3,"sources":["/Users/natalia/Development/portfolio/components/DaoQuotes/Divination.js"],"names":["zen","React","initialState","askAquestion","chapterNum","poem","showEntirePoem","Divination","event","preventDefault","setState","source","props","dataSource","index","Math","random","length","rounded","floor","passage","chozenPoem","split","indexQuote","roundedQuote","poemIndexes","prevProps","isEnglish","state","shouldShowButton","questMessage","revealBtnMessage","contextBtnMessage","againBtnMessage","handleClick","map","line","isCurrentLineSelected","includes","shouldShowLine","className","handleShowPoem","resetAll","Component"],"mappings":"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","sourcesContent":["// import './divination.scss';\nimport zen from './images/again.gif';\n\nimport React from 'react';\n\n// import { tao, taoChn } from './dao'\n\nconst initialState = {\n    askAquestion: true,\n    chapterNum: -1,\n    poem: null,\n    showEntirePoem: false,\n}\n\nexport default class Divination extends React.Component {\n    state = initialState\n\n    componentDidUpdate(prevProps) {\n        if (prevProps.isEnglish !== this.props.isEnglish) {\n            this.setState({ ...initialState })\n        }\n    }\n\n    handleClick = (event) =>  { \n        event.preventDefault()\n        this.setState({ askAquestion: false })\n// is it english or chinese\n        // const source = this.props.isEnglish\n        //     ? tao\n        //     : taoChn\n\n        const source = this.props.dataSource\n\n//choose a chapter\n        const index   = Math.random() * (source.length)\n        const rounded = Math.floor(index)\n \n\n        const passage = source[rounded]\n        \n        const { chapterNum, poem } = passage.passage\n\n  \n        //choose a quote\n            const chozenPoem   = poem.split('</br>')\n            const indexQuote   = Math.random() * (chozenPoem.length - 1)\n            const roundedQuote = Math.floor(indexQuote)\n\n            const poemIndexes = [\n                roundedQuote,\n                // roundedQuote + 1,\n            ]\n                        \n            this.setState({\n                chapterNum,\n                poem: poem.split('</br>'),\n                poemIndexes,\n            })            \n    }\n\n  \n\n    handleShowPoem = () => {\n        this.setState({ showEntirePoem: true })\n        this.setState({ askAquestion: false })\n    }\n\n    resetAll = () => {\n        this.setState({ ...initialState })\n        \n    }\n\n    render() {\n        const { askAquestion, poem, poemIndexes, showEntirePoem } = this.state\n\n        const shouldShowButton = poem && !showEntirePoem\n\n        const questMessage = this.props.isEnglish ? 'Make a question out of your doubts' : '问一个问题'\n\n        const revealBtnMessage = this.props.isEnglish ? 'Reveal a quote...' : '显示报价...'\n\n        const contextBtnMessage = this.props.isEnglish ? 'This quote in chapter' : '本章引用'\n\n        const againBtnMessage = this.props.isEnglish ? 'Start again' : '重新开始'\n\n\n        return (\n            <div className=\"divination\">\n                {\n                    askAquestion && (\n                        <div className=\"question\">\n                            <h3> { questMessage }</h3>\n                            <a href=\"#\" onClick={this.handleClick} className=\"reveal_btn\" alt=\"click         to see Dao quote\">{ revealBtnMessage }</a> \n                        </div>\n                    )\n                }\n\n                <div className=\"quoteContainer\">\n                    <div className=\"quoteBlock\">\n                        {\n                            poem && poem.map((line, index) => {\n                                const isCurrentLineSelected = poemIndexes.includes(index)\n\n                                const shouldShowLine = isCurrentLineSelected || showEntirePoem\n\n                                let className = shouldShowLine ? \"poem-line show\" : \"poem-line\"\n\n                                if (showEntirePoem && isCurrentLineSelected) {\n                                    className = className + \" highlight\"             \n                                }\n\n                                return <div key={index} className={className}>{ line }</div>\n                            })\n                        }\n                       \n                    </div>\n\n                    {\n                        \n                        shouldShowButton && (\n                            <div className=\"details\">\n    <a className=\"reveal_btn\" onClick={this.handleShowPoem}>{contextBtnMessage}</a>\n                            </div>\n                        )\n                    }\n                     {\n                            !askAquestion && (\n                            <div className=\"again_btn\">\n                            <a href=\"#\" onClick={this.resetAll} className=\"zen_btn\" alt=\"new quote from Dao\">\n                                <img className=\"try_again\" src={zen} alt=\"try again\"></img> {againBtnMessage}\n                            </a>\n                            </div>)\n                        }\n                </div>\n            </div>\n\n        )\n    }\n}"]},"metadata":{},"sourceType":"module"}