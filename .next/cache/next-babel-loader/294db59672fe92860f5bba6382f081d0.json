{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React, { useState, useEffect, Fragment } from 'react';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\nimport { useTheme } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Link from 'next/link';\nimport clsx from 'clsx';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport Container from '@material-ui/core/Container';\nimport AnchorLink from 'react-anchor-link-smooth-scroll';\nimport Fade from '@material-ui/core/Fade';\nimport { withTranslation } from \"../../i18n\";\nimport logo from \"../../public/images/profile-logo.svg\";\nimport routeLink from \"../../public/text/link\";\nimport \"../../vendors/hamburger-menu.css\";\nimport useStyles from './header-style';\nimport Settings from '../Settings';\nimport navMenu from '../SideNavigation/menu';\nlet counter = 0;\n\nfunction createData(name, url, offset) {\n  counter += 1;\n  return {\n    id: counter,\n    name,\n    url,\n    offset\n  };\n}\n\nconst LinkBtn = React.forwardRef(function LinkBtn(props, ref) {\n  // eslint-disable-line\n  return __jsx(AnchorLink, _extends({\n    to: props.to\n  }, props, {\n    innerRef: ref\n  })); // eslint-disable-line\n});\n\nfunction Header(props) {\n  // Theme breakpoints\n  const theme = useTheme();\n  const isDesktop = useMediaQuery(theme.breakpoints.up('md'));\n  const isMobile = useMediaQuery(theme.breakpoints.down('md'));\n  const {\n    0: fixed,\n    1: setFixed\n  } = useState(false);\n  let flagFixed = false;\n\n  const handleScroll = () => {\n    const doc = document.documentElement;\n    const scroll = (window.pageYOffset || doc.scrollTop) - (doc.clientTop || 0);\n    const newFlagFixed = scroll > 80;\n\n    if (flagFixed !== newFlagFixed) {\n      setFixed(newFlagFixed);\n      flagFixed = newFlagFixed;\n    }\n  };\n\n  useEffect(() => {\n    window.addEventListener('scroll', handleScroll);\n  }, []);\n  const classes = useStyles();\n  const {\n    onToggleDark,\n    onToggleDir,\n    invert,\n    t\n  } = props;\n  const {\n    0: menuList\n  } = useState([createData(navMenu[0], '#' + navMenu[0]), createData(navMenu[1], '#' + navMenu[1], -100), createData(navMenu[2], '#' + navMenu[2]), createData(navMenu[3], '#' + navMenu[3], -40), createData(navMenu[4], '#' + navMenu[4], -40), createData(navMenu[5], '#' + navMenu[5], -40), createData(navMenu[6], '#' + navMenu[6])]);\n  const {\n    0: openDrawer,\n    1: setOpenDrawer\n  } = useState(false);\n\n  const handleOpenDrawer = () => {\n    setOpenDrawer(!openDrawer);\n  };\n\n  const handleCloseDrawer = () => {\n    setOpenDrawer(false);\n  };\n\n  return __jsx(Fragment, null, __jsx(AppBar, {\n    component: \"div\",\n    position: \"relative\",\n    id: \"header\",\n    className: clsx(classes.header, invert || fixed || isMobile ? classes.fixed : '', openDrawer && classes.openDrawer)\n  }, __jsx(Container, {\n    fixed: isDesktop\n  }, __jsx(\"div\", {\n    className: classes.headerContent\n  }, __jsx(\"nav\", {\n    className: clsx(classes.navLogo, invert && classes.invert)\n  }, __jsx(IconButton, {\n    onClick: handleOpenDrawer,\n    className: clsx('hamburger hamburger--squeeze', classes.mobileMenu, openDrawer && 'is-active')\n  }, __jsx(\"span\", {\n    className: \"hamburger-box\"\n  }, __jsx(\"span\", {\n    className: clsx(classes.bar, 'hamburger-inner')\n  }))), __jsx(\"div\", {\n    className: classes.logo\n  }, invert ? __jsx(Link, {\n    href: routeLink.profile.home\n  }, __jsx(\"a\", null, __jsx(\"img\", {\n    src: logo,\n    alt: \"logo\"\n  }))) : __jsx(AnchorLink, {\n    href: \"#home\"\n  }, __jsx(\"img\", {\n    src: logo,\n    alt: \"logo\"\n  }))), __jsx(Settings, {\n    toggleDark: onToggleDark,\n    toggleDir: onToggleDir,\n    invert: invert\n  }))))), __jsx(Fade, {\n    in: openDrawer\n  }, __jsx(\"div\", {\n    className: clsx(classes.paperNav, openDrawer && classes.show)\n  }, __jsx(\"div\", {\n    className: classes.mobileNav\n  }, openDrawer && __jsx(\"ul\", {\n    className: classes.menu\n  }, menuList.map((item, index) => __jsx(\"li\", {\n    key: item.id.toString(),\n    style: {\n      animationDuration: index * 0.15 + 's'\n    }\n  }, invert ? // eslint-disable-next-line\n  __jsx(Button, {\n    href: '/' + item.url\n  }, t('common:profile-landing.header_' + item.name)) : // eslint-disable-next-line\n  __jsx(Button, {\n    component: AnchorLink,\n    onClick: handleCloseDrawer,\n    offset: item.offset || 0,\n    href: item.url\n  }, t('common:profile-landing.header_' + item.name)))))))));\n}\n\nHeader.defaultProps = {\n  invert: false\n};\nexport default withTranslation(['profile-landing'])(Header);","map":null,"metadata":{},"sourceType":"module"}