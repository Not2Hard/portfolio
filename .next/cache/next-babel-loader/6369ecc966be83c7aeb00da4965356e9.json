{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport clsx from 'clsx';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport Head from 'next/head';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Header from '../components/Header';\nimport GallerySmall from '../components/Gallery/GallerySmall';\nimport Notification from '../components/Notification';\nimport brand from '../public/text/brand';\nimport { withTranslation } from '../i18n';\nimport TapFork from '../components/Projectsux/Tf.js';\nimport Container from '@material-ui/core/Container';\nimport tfmock from '../public/images/profile/ux-images/tapandfork.jpg';\nimport tfhead from '../public/images/profile/ux-images/tf_header.jpg';\n\nvar sectionMargin = function sectionMargin(margin) {\n  return margin * 10;\n};\n\nvar useStyles = makeStyles(function (theme) {\n  return {\n    mainWrap: {\n      position: 'relative',\n      width: '100%',\n      overflow: 'hidden',\n      background: theme.palette.type === 'dark' ? theme.palette.background[\"default\"] : theme.palette.background.paper\n    },\n    spaceBottom: {\n      marginBottom: sectionMargin(theme.spacing())\n    },\n    spaceTop: {\n      paddingTop: sectionMargin(theme.spacing())\n    },\n    containerWrap: {\n      marginTop: theme.spacing(4),\n      padding: theme.spacing(4),\n      '& > section': {\n        position: 'relative'\n      }\n    },\n    blueWrap: {\n      backgroundImage: \"linear-gradient(120deg, \".concat(theme.palette.type === 'dark' ? theme.palette.secondary.dark : theme.palette.secondary.main, \", \").concat(theme.palette.type === 'dark' ? theme.palette.primary.dark : theme.palette.primary.main, \")\"),\n      padding: theme.spacing(10, 0)\n    }\n  };\n});\n\nfunction TFapp(props) {\n  var classes = useStyles();\n  var onToggleDark = props.onToggleDark,\n      onToggleDir = props.onToggleDir,\n      t = props.t;\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Head, null, /*#__PURE__*/React.createElement(\"title\", null, brand.profile.name, \"\\xA0 - Blank page\")), /*#__PURE__*/React.createElement(CssBaseline, null), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.mainWrap\n  }, /*#__PURE__*/React.createElement(Header, {\n    onToggleDark: onToggleDark,\n    onToggleDir: onToggleDir,\n    invert: true\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.headderImg\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: tfhead,\n    align: \"center\",\n    width: \"100%\",\n    alt: \"App on mobile\"\n  }), \" \"), /*#__PURE__*/React.createElement(\"main\", {\n    className: classes.containerWrap\n  }, /*#__PURE__*/React.createElement(\"section\", {\n    className: clsx(classes.spaceTop, classes.spaceBottom)\n  }, /*#__PURE__*/React.createElement(Typography, {\n    variant: \"h2\",\n    align: \"center\",\n    gutterBottom: true\n  }, \"Tap & Fork mobile app\")), /*#__PURE__*/React.createElement(TapFork, null)), /*#__PURE__*/React.createElement(\"section\", null, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.blueWrap\n  }, /*#__PURE__*/React.createElement(Container, {\n    maxWidth: \"lg\"\n  }, /*#__PURE__*/React.createElement(\"a\", {\n    href: \"/tflooks.pdf\",\n    target: \"_blank\"\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: tfmock,\n    alt: \"tap and fork\",\n    align: \"center\",\n    width: \"100%\"\n  }))))), /*#__PURE__*/React.createElement(GallerySmall, null)));\n}\n\nTFapp.getInitialProps = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n  return _regeneratorRuntime.wrap(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          return _context.abrupt(\"return\", {\n            namespacesRequired: ['common']\n          });\n\n        case 1:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _callee);\n}));\nexport default withTranslation('common')(TFapp);","map":null,"metadata":{},"sourceType":"module"}