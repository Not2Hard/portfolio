{"ast":null,"code":"var _jsxFileName = \"/Users/natalia/Development/portfolio/components/Projectsux/Tf.js\";\nvar __jsx = React.createElement;\nimport React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport Container from '@material-ui/core/Container';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\nimport { useTheme } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport Divider from '@material-ui/core/Divider';\nimport { withTranslation } from \"../../i18n\";\nimport logo from '../../public/images/profile-logo.svg';\nimport brand from \"../../public/text/brand\";\nimport { useText } from \"../../theme/common\";\nimport useStyles from './ux-style';\nimport ContactForm from '../Contact/Form';\nimport tfscreens from '../../public/images/profile/tf-screens.jpg';\nimport tfflow from '../../public/images/profile/tf-flow.svg';\nimport users from '../../public/images/profile/tf-images/users.jpg';\nimport tfmock from '../../public/images/profile/tf-images/tapandfork.jpg';\n\nconst TapFork = () => {\n  const {\n    0: pageNumber,\n    1: setPageNumber\n  } = useState(1);\n  const classes = useStyles();\n  const text = useText();\n  const theme = useTheme();\n  const isMobile = useMediaQuery(theme.breakpoints.down('sm'));\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.root,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Container, {\n    maxWidth: \"md\",\n    component: \"footer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    variant: \"h6\",\n    align: \"left\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 9\n    }\n  }, \"Project Description:\"), /*#__PURE__*/React.createElement(Typography, {\n    className: text.paragraph,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 9\n    }\n  }, \"Tap & Fork is an application that allows people to find restaurants. Conceptually it is similar to applications like Yelp, OpenTable or Zomato. Tap & Fork is built to address the shortcoming of the existing applications to make the pricing strategy more attractive to restaurant owners and to allow them to fully control their marketing campaigns. With Tap & Fork, restaurant owners can easily upload images, create coupons, and run promotions.\"), /*#__PURE__*/React.createElement(Typography, {\n    className: text.paragraph,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 9\n    }\n  }, \"Tap & Fork has a website where restaurant owners could build promotions that would be run for specified time intervals, add coupons, and create custom images with a simple and easy-to-use web based graphic editor.\", /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(Typography, {\n    className: text.paragraph,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"b\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 9\n    }\n  }, \"My role in this project\"), \" - UX and Graphic design of the application\"), /*#__PURE__*/React.createElement(Typography, {\n    variant: \"h6\",\n    align: \"left\",\n    color: \"primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }\n  }, \"Desk research:\"), /*#__PURE__*/React.createElement(Typography, {\n    className: text.paragraph,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 11\n    }\n  }, \"To fully understand what set Tap & Fork apart from its competitors, it was crucial that these competitors first be identified. Other projects with similar functionality on the market were:  \", /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 201\n    }\n  }), /*#__PURE__*/React.createElement(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 15\n    }\n  }, \"Yelp\"), /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 15\n    }\n  }, \"OpenTable\"), /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 15\n    }\n  }, \"Zomato\"), /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 15\n    }\n  }, \"Urbanspoon\"), /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 15\n    }\n  }, \"UberEATS\")), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }\n  }), \"As a result we decided on minimum functionality. Research amongst our friends and family showed us that most of these apps have too much information, and lack large, eye-catching images.\", /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 13\n    }\n  }), \"My goal was to create aplication design that is more fun then them. List with short description is practical but images and cards are much more porular now.\"), /*#__PURE__*/React.createElement(Typography, {\n    variant: \"h6\",\n    align: \"left\",\n    color: \"primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 11\n    }\n  }, \"User research:\"), /*#__PURE__*/React.createElement(Typography, {\n    className: text.paragraph,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 11\n    }\n  }, \"At the beginning of the project we  ran a series of user testing trying to find out  what people are looking for in such an application, and how existing applications come short. One of the biggest issues reported by users was the amount of information surfaced by most of the popular applications: when applications displays the list of restaurants that match the search criteria the listed restaurants would surface too much information to parse through. At the same time the images of restaurants in the list were too small making it difficult to see the unique features and the spirit of each restaurant. Our solution to that problem was to reduce the amount of the information presented in the restaurant list focusing on the image that would show each restaurant unique features. We have received a very strong positive user feedback. A teem member contacted 20 restaurant owners. After that we could state goals and pain points for both restaurant customers and restaurant owners.\"), /*#__PURE__*/React.createElement(Typography, {\n    className: text.paragraph,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 12\n    }\n  }, \"Restaurant customers objectives:\", /*#__PURE__*/React.createElement(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 15\n    }\n  }, \"Find a restaurants of preferred type and distance\"), /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 15\n    }\n  }, \"Get coupons and specials\"), /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 15\n    }\n  }, \"Call to make reservation\"), /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 15\n    }\n  }, \"Directions\"), /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 15\n    }\n  }, \"Save for future visits\"))), /*#__PURE__*/React.createElement(Typography, {\n    className: text.paragraph,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 11\n    }\n  }, \"Restaurant owners needs:\", /*#__PURE__*/React.createElement(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 15\n    }\n  }, \"Affordable branding and listings\"), /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 15\n    }\n  }, \"Advertising through coupons and specials\"), /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 15\n    }\n  }, \"Easily publish new images\"), /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 15\n    }\n  }, \"Control promotion time windows\"))), /*#__PURE__*/React.createElement(Typography, {\n    className: text.paragraph,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 11\n    }\n  }, \"I could create user personas and coordinate ui with different scenarios of app users. A symple flowchart was created as a result:\")), /*#__PURE__*/React.createElement(Container, {\n    maxWidth: \"lg\",\n    component: \"footer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 12\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: tfflow,\n    align: \"center\",\n    width: \"100%\",\n    alt: \"App on mobile\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 20\n    }\n  })), /*#__PURE__*/React.createElement(Container, {\n    maxWidth: \"md\",\n    component: \"footer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    className: text.paragraph,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 11\n    }\n  }, \"As a result we decided on this functionality list:\", /*#__PURE__*/React.createElement(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 15\n    }\n  }, \"Search for distance, cuisine type, and keywords\"), /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 15\n    }\n  }, \"Listing of graphic ads\"), /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 15\n    }\n  }, \"Call and direction buttons\"), /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 15\n    }\n  }, \"Gallery for each restaurant\"), /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 15\n    }\n  }, \"Star rating\"), /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 15\n    }\n  }, \"Favorites \"), /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 15\n    }\n  }, \"Sample placeholders and Google images for non-subscribed restaurants\")), /*#__PURE__*/React.createElement(\"a\", {\n    href: \"/tfsi.pdf\",\n    target: \"_blank\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 13\n    }\n  }, \"See goals and flowcharts in pdf file (for app and editor together).\"), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(Typography, {\n    className: text.paragraph,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 11\n    }\n  }, \"Search result can be displayed as list. For the pupose of this aplikation and for better user experience I wanted to use cards with graphic. I think it is optimal to have 4 cards per screen and make them tall. It give an oppotunity for clear headder with name and stars. Images of food looked so much better and more destinguisheble then in other apps.\"), /*#__PURE__*/React.createElement(Typography, {\n    className: text.paragraph,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 11\n    }\n  }, \"Espesially big problem with the design was the initial state of the app. Where the images and restaurants would come from? How the app should look when it is just starting? The solution was to use googl data and preset images for certan types of restaurants. As a result the app was beautiful and addictive to scroll even when it just came alive.\"), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"img\", {\n    src: tfscreens,\n    align: \"center\",\n    width: \"100%\",\n    alt: \"App on mobile\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 11\n    }\n  }), \" \", /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(Typography, {\n    variant: \"h6\",\n    align: \"left\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 11\n    }\n  }), \"I'm particularly proud of some contrebutions I made to this project:\"), /*#__PURE__*/React.createElement(Typography, {\n    className: text.paragraph,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 15\n    }\n  }, \"Google data is used before restaurants customize their business account \"), /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 15\n    }\n  }, \"Beautifull images\"), /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 15\n    }\n  }, \"The ability to have 4 restaurants on one mobile screen. Image size is very important for pleasant scroll and prevents users from feeling bombarded with information.\")), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 18\n    }\n  }))));\n};\n\nTapFork.propTypes = {\n  t: PropTypes.func.isRequired\n};\nexport default withTranslation(['profile-landing'])(TapFork);","map":{"version":3,"sources":["/Users/natalia/Development/portfolio/components/Projectsux/Tf.js"],"names":["React","useState","PropTypes","Container","useMediaQuery","useTheme","Grid","Typography","Divider","withTranslation","logo","brand","useText","useStyles","ContactForm","tfscreens","tfflow","users","tfmock","TapFork","pageNumber","setPageNumber","classes","text","theme","isMobile","breakpoints","down","root","paragraph","propTypes","t","func","isRequired"],"mappings":"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","sourcesContent":["\n\nimport React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport Container from '@material-ui/core/Container';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\nimport { useTheme } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport Divider from '@material-ui/core/Divider';\nimport { withTranslation } from '~/i18n';\nimport logo from '../../public/images/profile-logo.svg';\nimport brand from '~/public/text/brand';\nimport { useText } from '~/theme/common';\nimport useStyles from './ux-style';\nimport ContactForm from '../Contact/Form';\nimport tfscreens from '../../public/images/profile/tf-screens.jpg';\nimport tfflow from '../../public/images/profile/tf-flow.svg';\nimport users from '../../public/images/profile/tf-images/users.jpg';\nimport tfmock from '../../public/images/profile/tf-images/tapandfork.jpg';\n\nconst TapFork = () => {\n  const [pageNumber, setPageNumber] = useState(1);\n  const classes = useStyles();\n  const text = useText();\n  const theme = useTheme();\n  const isMobile = useMediaQuery(theme.breakpoints.down('sm'));\n\n\n    return (\n      <div className={classes.root}>\n        <Container maxWidth=\"md\" component=\"footer\">\n        <Typography variant=\"h6\" align=\"left\" >\n          Project Description:\n        </Typography>\n        \n        <Typography className={text.paragraph}>\n          Tap & Fork is an application that allows people to find restaurants. Conceptually it is similar to applications like Yelp, OpenTable or Zomato. Tap & Fork is built to address the shortcoming of the existing applications to make the pricing strategy more attractive to restaurant owners and to allow them to fully control their marketing campaigns. With Tap & Fork, restaurant owners can easily upload images, create coupons, and run promotions. \n        </Typography>\n        <Typography className={text.paragraph}>\n          Tap & Fork has a website where restaurant owners could build promotions that would be run for specified time intervals, add coupons, and create custom images with a simple and easy-to-use web based graphic editor.\n          <br />\n        </Typography>\n        <Typography className={text.paragraph}>\n        <b>My role in this project</b> - UX and Graphic design of the application\n        </Typography>\n        <Typography variant=\"h6\" align=\"left\" color=\"primary\">\n          Desk research:\n          </Typography>\n          <Typography className={text.paragraph}>\n          To fully understand what set Tap & Fork apart from its competitors, it was crucial that these competitors first be identified. Other projects with similar functionality on the market were:  <br/>\n          <ul>\n              <li>Yelp</li>\n              <li>OpenTable</li>\n              <li>Zomato</li>\n              <li>Urbanspoon</li>\n              <li>UberEATS</li>\n            </ul>\n            <br/>\n            As a result we decided on minimum functionality. Research amongst our friends and family showed us that most of these apps have too much information, and lack large, eye-catching images.\n            <br/>\n             My goal was to create aplication design that is more fun then them. List with short description is practical but images and cards are much more porular now.\n          </Typography>\n          \n          <Typography variant=\"h6\" align=\"left\" color=\"primary\">\n            User research:\n          </Typography>\n          <Typography className={text.paragraph}>\n          At the beginning of the project we  ran a series of user testing trying to find out  what people are looking for in such an application, and how existing applications come short. One of the biggest issues reported by users was the amount of information surfaced by most of the popular applications: when applications displays the list of restaurants that match the search criteria the listed restaurants would surface too much information to parse through. At the same time the images of restaurants in the list were too small making it difficult to see the unique features and the spirit of each restaurant.\n          \n          Our solution to that problem was to reduce the amount of the information presented in the restaurant list focusing on the image that would show each restaurant unique features. We have received a very strong positive user feedback.\n\n\n           A teem member contacted 20 restaurant owners. After that we could state goals and pain points for both restaurant customers and restaurant owners. \n           </Typography>\n           <Typography className={text.paragraph}>\n           Restaurant customers objectives:\n            <ul>\n              <li>Find a restaurants of preferred type and distance</li>\n              <li>Get coupons and specials</li>\n              <li>Call to make reservation</li>\n              <li>Directions</li>\n              <li>Save for future visits</li>\n            </ul>\n          </Typography>\n          <Typography className={text.paragraph}>\n          Restaurant owners needs:\n            <ul>\n              <li>Affordable branding and listings</li>\n              <li>Advertising through coupons and specials</li>\n              <li>Easily publish new images</li>\n              <li>Control promotion time windows</li>\n            </ul>\n          </Typography>\n          <Typography className={text.paragraph}>\n           I could create user personas and coordinate ui with different scenarios of app users. A symple flowchart was created as a result:\n           </Typography>\n           </Container> \n           <Container maxWidth=\"lg\" component=\"footer\">\n                   <img src={tfflow} align=\"center\" width=\"100%\" alt=\"App on mobile\" />\n          </Container> \n          <Container maxWidth=\"md\" component=\"footer\">\n          <Typography className={text.paragraph}>\n            As a result we decided on this functionality list:\n            <ul>\n              <li>Search for distance, cuisine type, and keywords</li>\n              <li>Listing of graphic ads</li>\n              <li>Call and direction buttons</li>\n              <li>Gallery for each restaurant</li>\n              <li>Star rating</li>\n              <li>Favorites </li>\n              <li>Sample placeholders and Google images for non-subscribed restaurants</li>\n            </ul>\n            <a href=\"/tfsi.pdf\" target=\"_blank\">See goals and flowcharts in pdf file (for app and editor together).</a>\n            <br />\n          </Typography>\n          <Typography className={text.paragraph}>\n           Search result can be displayed as list. For the pupose of this aplikation and for better user experience I wanted to use cards with graphic. I think it is optimal to have 4 cards per screen and make them tall. It give an oppotunity for clear headder with name and stars. Images of food looked so much better and more destinguisheble then in other apps.\n          </Typography>\n          <Typography className={text.paragraph}>\n           Espesially big problem with the design was the initial state of the app. Where the images and restaurants would come from? How the app should look when it is just starting? The solution was to use googl data and preset images for certan types of restaurants. As a result the app was beautiful and addictive to scroll even when it just came alive.\n          </Typography>\n          <br/>\n          <img src={tfscreens} align=\"center\" width=\"100%\" alt=\"App on mobile\" />\n          <br/> <br/>\n          \n          <Typography variant=\"h6\" align=\"left\">\n          <br/>\n          I'm particularly proud of some contrebutions I made to this project:\n          </Typography>\n          <Typography className={text.paragraph}>\n            <ul>\n              <li>Google data is used before restaurants customize their business account </li>\n              <li>Beautifull images</li>\n              <li>The ability to have 4 restaurants on one mobile screen. Image size is very important for pleasant scroll and prevents users from feeling bombarded with information.</li>\n            </ul>\n            <br/><br/>\n          </Typography>\n        </Container>      \n    </div>\n    );\n  }\n\n  TapFork.propTypes = {\n    t: PropTypes.func.isRequired\n  };\n  \n  export default withTranslation(['profile-landing'])(TapFork);"]},"metadata":{},"sourceType":"module"}